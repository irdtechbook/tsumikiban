= 積み基板が増える技術的要因


前章では、挫折に至る理由を、モチベーションや周辺に関する点で述べました。作りたいものがない、モチベーションがなくなる、具体的な情報がない、といった観点で述べました。本章では、もう少し電子工作やデバイスに関する技術的な観点での課題や難点について述べます。


本章に書いてある内容は、いずれも非常にネガティブに見えるかもしれません。実際「難しい理由」を意図的に取り上げています。もちろん対応策がありますし、こういうこともある、という風に読んでいただければ幸いです。

== 挫折・積み基板を増やす要因


いくつもの要因がありますので、それぞれ取り上げましょう。繰り返しになりますが、難しい理由はありますが、対応策はあります。このネガティブな項目の反対をいけばよいのです。

 * 作りたいモノがない
 * Lチカとその次の断崖っぷり
 * パワー系ムズイ
 * 要素が増えるとムズイ
 * センサームズイ
 * 通信ムズイ
 * 画面表示には通信必須
 * データシート読めない


=== 作りたいものがない


作りたいものを見つけて、要件定義することが非常に重要であることは、前章で述べました。ぜひそちらを参照ください。


繰り返しになりますが、どんなデバイス/ボードをつかうか、どう実現するかは手段であり、目的ではありません。


手段を目的にするのは楽しいものですが…


ボードを使うということが目的になると、積み基板がどんどん増えていきます。あるいは、入手・購入すること自体が目的化することもあるでしょう。それはそれでよいものですが…

=== Lチカとその次の断崖っぷり


まずは、Lチカまで完了しました。お疲れさまでした。デビューおめでとうございます。


さて、ではその次に何をやりましょうか？


なお、Lチカを無意味だというつもりは全くありません。Lチカ自体は非常に重要な動作検証であり、プログラミングそのものがきちんと行えることの確認です。ボード自体が正常に動作すること、PCとの通信・接続や開発環境、電源、ポート指定などすべてが正常であって初めて達成されるものです。ソフトウェア開発において、言語習得を行う過程でいうところのHello Worldと同様か、それ以上の重要性を持ちます。


Lチカを完了させるまでに必要なコードはたいてい数行です。しかもLED以外のものは必要ありません（本当は電流制限抵抗を付けた方がよい。短時間ならまあ…)。


何かを作ろうとしたとき、必要な部品やコードは一気に増えます。外部の情報を得るためのセンサ、信号を入力するためのスイッチ、対象を制御するためのアクチュエーター、何かを表示するためのモニタ、そういったものが増えます。しかも、たいていはひとつではありません。いきなり複数の要素を含む必要が出てきて、回路はごちゃごちゃし始めるでしょう。


部品が増えるということは、制御するためのコードも増えてきます。ライブラリを使ったり、入出力のためのピン指定を行い、適切な周期・タイミングで制御したり、取ってきた値を加工したり、液晶や外部のネットワークに対して読み取り・書き込みを行ったり。そしてそれらの結果を、シリアルモニタや液晶モニタ等に表示する必要があります。この中で通信を扱うとき、何かミスがあれば想定通りの挙動を示しません。何か間違った表示をするならまだしも情報がありますが、ちょっとしたことでうんともすんともいわないように見えてしまうことも少なくありません。後述するように通信はミスが生じやすく、かつ何が間違っているのかわかりづらいという大変厄介なものです。


素子を壊すといったことはめったに起こりませんが、使い方を間違えると、やはり素子を壊してしまう可能性はあります。Lチカするだけでも、電流制限抵抗を入れないと電流を流しすぎ、素子の寿命を縮めたり、場合によっては本体を壊すことだってありえます。なお、素子を壊すことはめったにない、という表現を使いましたが、非常に壊れやすい素子というものは存在します。試行錯誤のうちに壊してしまうと、素子が壊れているのか、通信や配線がダメなのか、プログラムが間違っているのか、などなど、チェック項目が急増します。


このように、Lチカの次のステップに進む場合、たいてい大きな断崖が生じます。

==== 電流制限抵抗（などの保護回路）について


一応、電流制限抵抗がなぜ必要なのかも簡単に説明しておきましょう。


電子回路の半導体素子は、基本的に温度が上がれば上がるほど電流量が増える(抵抗値が減る)特性があります。このため、放熱が間に合わないと、最終的には半導体素子が焼損します（自作PCなどでもCPUクーラーをつけずにCPUをぶんまわしちゃうとCPUが焼損するケースがありますね）。


もう少しわかりやすく記載すると、原理的には　電気を通して熱を持つ　→　電流量が増える　→　電流量が増えるので更に熱を持つ　というサイクルを繰り返して最終的に素子が死ぬ　という流れです。


この流れを断ち切るには、以下のアプローチがあります。

 * そもそも電流が放熱間に合わなくなるぐらい流れないように、抵抗を直列でつないで電流量を抑制しちゃう
 * 一定以上の電流が流れ出したら回路を遮断する



前者がいわゆるところの電流制限抵抗ですね。ちなみに、後者の代表格はヒューズやブレーカーになります。

=== パワー系ムズイ


小さなマイコンで、大きなものを動かすのは夢がありますね。実際リレーや半導体素子（モータードライバ）を適切に利用することで、比較的簡単にモーターなどの装置を動かすことができます。また、物理的なものを動かすことができるようになれば、作れるものの幅は一気に広がります。


では、直接マイコンでモーターのような負荷を動かせるかというと、これは不可能です。たとえば、Arduinoで直接モーターを回すことができるか考えてみましょう。ミニ四駆に使われるような小型モーター（いわゆるマブチモーター）でも、電流は1100mA程度とされています。一方で、Arduinoの出力端子の定格は最大40mAです。これを超えると、マイコンが破壊に至る可能性があります。マイコンにとっては、出力とGNDを直結(ショートさせた)ようなものになり、電流を引き出しすぎるため破壊に至ります（いたる可能性があります）。ボードの電源系を壊したり、最悪PCが落ちます。USBの電流引き出しすぎで、PCがUSBを落とす(切り離す)可能性もあります。


ではどうするかというと、先に述べたように、リレーやトランジスタなどを使って、マイコンの出力でこれらの素子を「スイッチ」として使い、「重い負荷」を制御します。機能としての設計の「イメージ」は当初はこれで十分ですが、詳細設計を行うには、マイコンの仕様、スイッチになる素子の仕様、負荷の仕様をきちんと検討したうえで、適切な設計をする必要があります。


また、重い負荷はたいていの場合、過渡応答も考慮する必要があります。突入電力や回生電力なども考慮する必要がある場合があります。これらを考慮しないと「動くはずなのにうまく動かない」「動いたり動かなかったり」あるいは、「突然素子が死ぬ」といった現象に悩まされる可能性があります。どこかで展示するために持って行ったりしたら、その先で動かない、といったことも。

==== そういえばPICって出てきていきなりめちゃくちゃ流行りましたよね


今でこそ一般的であり、世に溢れているPICマイコンですが、いまから20年ほど前の2000年頃に空前のPICブームが起きました。


このとき、PICブームの火付け役に大きな影響があったのが@<strong>{Lチカ}というよりもマイコンとLEDを直結してドライブできる（当時としては）高出力のPICマイコンが安価に市場にでてきたことがきっかけだった覚えがあります。それまでのマイコンは、トランジスタ増幅回路を1段噛ませないとLチカできなかったんですよ…


なので、今後もマイコンやボードから「直接ドライブできる対象が増えることで一気にブームが来る」というケースは往々に発生するのだろうな、という気がします。最近はオプションボードの種類が多いマイコンも増えたので、早々のことでは歴史が変わるようなことにはならないのかもですが。

=== 要素が増えるとムズイ


単純に要素が増えると、加速度的に難しくなります。もちろんそれぞれの構成要素について知らなければならない情報が増え、その調査をしようにも情報が断片的になってしまいます。また、要素が増えると、途中経路のどこで失敗しているのかの解析が難しくなります。


先の例で挙げたようにマイコンでリレーを制御し、モーターをオン/オフする回路を作ったとしましょう。ここに出てくる要素だけで、マイコン、制御プログラム、配線、リレー、負荷、電源、といったふうに急に登場人物が増えましたね。この全員が正しく(想定したとおりに)動く必要があります。どれかひとつでも間違っていれば想定の動作はしません。順番に確認できればよいですが、確認しやすい部分、確認しづらい部分があります。どうやって確認するのかを考える必要もあります。テスタで当たってわかる場合、動作音や光でわかる場合、プログラムのように画面でチェックする場合もあるでしょう。場合によっては素子を触って異常に発熱していることなど、何か異常があることに気づくケースすらあります。配線などは「目視」でチェックしますが、はんだ不良のように、テスタや顕微鏡でチェックする場合もあります。最後、けっきょくは素子が壊れていたなんてこともありえます。


いつでも同じように動くことが理想ですが、構成要素が複雑になれば動かない確率は飛躍的に上がっていきます。ひとつの要素が動く可能性が95%だったとしましょう。この5%は故障やミス、相性などすべての理由を含むと仮定します。ボード上のLEDをチカチカするとき、ボードとプログラムの2個ですから、およそ90%の確率で動きます。また、チェックすべきポイントは2か所しかありません。ところが、要素が10個に増えた場合、その確率は0.95^10となり、59.8%となります。ということは、4割動かないということになってしまいます。動かない割合は急激に増え、動かなかったときにチェックすべき箇所も大幅に増えてしまいます。つらい。


システムとして作り上げるためには、センサ、表示器、リレーなど、負荷（アクチュエータなど）、通信やネットワークという風に構成要素はどんどん増えていきます。そして、失敗する確率は文字通り「加速度的に」増加していきます。

==== 要素が増えた時の切り札　モジュール化


要素が増えたときにその要素を基板上などにまとめて実装すると、うまく回路が動作しなかった際には総当りで検証をする必要があり、結果としてチェックが加速度的に大変になります。一般的なこういう事象に対する対抗策は、回路を適切な粒度で「モジュール化」し、そのモジュールごとに完成させた上でトータルで動くようにする　というアプローチになります。


世の電気製品、電子回路も単一ボードで全てのパーツや回路を実装しているわけではなく、高度で複雑な回路になればなるほどこのモジュール化アプローチによって、モジュール毎の検証を行い、検査されたモジュールを組み合わせてさらにトータルで検査を行う、といった段階的なアプローチで製品試験を行い、出荷されていきます。


ただ、いいことづくめに見えるモジュール化ですが、欠点がふたつあるようです。

 * コストが上がる
 * モジュール結合部分がノイズを発生させがち



個人で電子回路を楽しむ分には影響は軽微だと思いますが、そういった影響もある、ということは覚えておくといいかもしれませんね。

=== センサームズイ


ここではセンサーを外部から情報を得る手段と定義します。温度や湿度、CO2などのガス濃度、臭いや明るさ、色、その他様々なセンサがあります。圧力や接触を検知するものもありますし、距離や形状を測定するセンサもありますね。カメラもセンサといえるかもしれません。


センサがセンシングできる内容には人が知覚できること、あるいは人には知覚できないことがありますが、いずれにせよ、何らかの情報をマイコンに教える手段であると考えてください。であれば、操作したことを教えるという意味で単純なスイッチですらセンサといっていいかもしれません。また通信によって情報が届くことも、この文脈ではセンサといっていいかもしれません。


さて、センサを使うためには、センサ素子そのものがあって、配線があって、電源があって、それを使うコードがあり、何らかの方法で表示するということになります。ということは、センサだけの話に限りませんが、どこかひとつにミスがあれば正常に動かないということ。センサ（+センサ電源)→配線→（センサとの通信のコード)→マイコン→（表示の通信のコード）→配線→表示デバイス（+表示の電源)と、9個の要素があったとします。データを取り込んで表示させるだけなのに、こんなにたくさんの要素が。


ちゃんと動くものを作るのはそれだけ大変。そして、配線などは、はんだ不良やブレッドボードの接触不良などで「経時的に」変化することがあります。さっきまで動いてたのに！といったことが現実には起きてしまいます。


またセンサによっては、間欠動作（一定時間ごとに休みを挟むように動作）させないと壊れてしまうセンサもあります。


たとえば匂いセンサなどがそれにあたります。匂いセンサは瞬間的に通電・加熱してセンサエレメントの抵抗値を読むセンサです。これを常時通電すると、センサエレメントが焼損してしまう可能性があります。プログラムのミスで長時間通電してしまったらどうでしょう？壊れてしまいます。そして、壊れたことを確認するのも大変です（単に抵抗値が変わってしまうだけなので）。

=== 通信ムズイ


もうひとつの鬼門は通信です。マイコン/電子工作界隈でよく使われる通信には、UART、I2C、SPIなどがあります。これらはいずれも有線で、センサや液晶などの表示デバイス、あるいはSDカードのようなデータ保存デバイスとの通信を担います。


2線や3線、4線での通信を行うので、その分の配線が必要ですし、本体とデバイスのそれぞれの指定のピンを正しく接続することが必要です。線が外れていたり、接触不良だったり、また通信設定(UARTの通信速度やパリティなど)もきちんと合わせる必要があります。


ちょっとした表示をするために小型液晶をつけるのはとてもいい選択ですが、その液晶を取り付けて動かすためにも通信は必須です。


Wi-Fiだって通信です。この場合はインターネットに接続できるようになるため、ボードができることは大幅に増えます。データをとってクラウドに上げる、そこから簡単なフロントページを作って可視化するなど、素敵ですね。


さて、通信はハマりやすいポイントです。まず、適切なライブラリを使って適切に設定をしないと、そもそも通信ができなかったりします。もちろん一から全部定義してやるのも可能ですが、最初にそれをやろうとするのは死の道です。まずは通信に必要なライブラリを適切に導入して、さっくり使い始めるところから始めましょう。通信ができないと、ボード単体でやるしかなくなり、たとえるなら真っ暗闇を手探りで探検するような状態になってしまいます。ネットワークの相性などもありますね。実際なぜか家のネットワークに全然つながらなくて、障害切り分けのためモバイルルータ相手に通信してみたら一発でつながった、なんてことも実体験としてあります。

=== 画面表示には通信必須


プログラムを書いたら、動いているかどうかを確認する必要があります。想定通りの動きをしているのかしていないのかがわからないと、電源が入っているのかすらわかりません。それは、たとえば処理をしていることをLEDで知らせるという程度でも有用です。ある一連の処理が終わるときに1ステップごとにLEDをチカチカさせる処理を入れたとしましょう。何回目で固まるのか、逆にどこで失敗しているのか、といったことを確かめる参考になります。


また、液晶があれば、処理状況などを文字として表示することも可能です。
自分の一挙手一投足に適切に反応してくれる液晶などのデバイスは、よほどでない限り必ずつけておくことをおすすめします。


ところが、このような表示デバイスを使うためには、通信が必須です。しかも、素子単体のデータシートはかなり難解です。
これを読み解いて実際に使えるように実装するのはかなり大変です。


先に解を述べておくと、有名なデバイスなら大抵(ほぼ99%以上)公開されている使いやすいライブラリがあります。

=== データシート読めない


データシートを読んだことはありますか？素子の特徴や電気的特性、通信が必要な場合はその通信の仕様などが書かれています。あるいは、オペアンプなどのように、様々な周波数で用いる素子の場合には周波数特性が、センサならば感度や直線性に関するデータが書いてあるでしょう。データシートはある程度読みなれないと、どこを読めばよいのかすら不明です。


何度か読んでみると、どこを読めばよいのかはだんだんわかってきます。それは慣れしかないので、頑張りましょう。本書の別項でデータシートの読むポイントを取り上げる可能性があります。


また、液晶などの表示デバイス、通信で読むタイプのセンサなどは、通信仕様が書いてあります。よく使うキャラクタ液晶16文字×2行の秋月のデータシートを見てみましょう。


@<href>{https://akizukidenshi.com/catalog/g/gM-09109/, https://akizukidenshi.com/catalog/g/gM-09109/}


Ｉ２Ｃ接続小型ＬＣＤモジュール（８×２行）ピッチ変換モジュール（完成品）


これは、700円で購入可能な8文字×2行のキャラクタ液晶モジュールです。表示可能な文字数は少ないものの、安価で小型で、ちょっとした表示に限定すれば非常に使いやすいものです。


このデータシートには、16進数またはバイナリで表示する方法や、初期化する方法等が情報として書かれています。しかし、果たしてこのデータシートを読んでどれだけの人が動かせるでしょうか。


また、もうひとつの例として、適当なADCのデータシートを見てみましょう。ADC(Analog to Digital Converter:アナログ値をデジタル値に変換して取り込むモジュール)もよく使われますが、生値では12bitないしは16bitのバイナリ値が取れるだけであって、電圧値として取り込む場合には、適宜変換してやる必要があります。


なお、これらはいずれも、そのデバイスに合致するライブラリを使わない場合の話で、実用的には適当なライブラリを使いましょう。そのデバイスへの理解を極める、といった目的以外では、基本的には一から実装するメリットはありません。変換速度などのクリティカルな制約がある用途では有用かもしれませんが、そもそもそういう用途に対して本書で取り上げるようなマイコンを選択するのは適当なのか、という観点で再検討が必要です。

=== 部品ストックが大変


ある程度の規模の作品を作ろうと思うと、様々な部品ストックをしておく必要が生じます。このストック部品を持っておくのも案外大変です。


抵抗やコンデンサなどの部品は個別に入手するのは案外大変です。1個当たりは安価なのですが、安価だからこそ、100個パックのような使いきれないほどのセットで購入する必要があるか、数個だけ購入するかの選択になります。秋月電子などでは1袋100本入りが100円といった価格で販売されていますが、逆にいうと1本2本使いたいときでも100本購入する必要があリます。


バラ売りしているお店もありますが、その場合単価が上がってしまいます。またそのときだけ使う分を買うと、はんだ付けのミスなどで足りなくなってしまう、なんてことになります。また送料もバカになりません。


秋葉原在住、あるいは通勤経路に秋葉原がある（他の電気街でもOKですが）といった状況でもなければ、細かい部品を都度入手するのは案外大変です。発注も面倒ですし、都度注文して届くまで待つ間にモチベーションは削られてしまいます。


思いついたらすぐ作業に入れる環境というのは貴重ですし、構築・維持はなかなか大変です。

== 電子回路は実はそんなに難しくない


さて、ここまでほとんど電子回路の話をしてきていません。本書で想定する電子回路・素子は、実はそれほど難しくありません。


逆説的ですが、回路や素子そのものは、オームの法則に基づき動作すると思ってほぼ問題ありません。かろうじて、キャパシタ(コンデンサ)が入ることもありますが、キャパシタの過渡応答が問題になることはほとんどないでしょう。


キャパシタはほとんどの場合、フィルタまたはノイズフィルタ(パスコン:バイパスコンデンサ)としての利用ですから、様々な理論はあるものの、いったんはおまじない的な理解をしておけばよいでしょう。
